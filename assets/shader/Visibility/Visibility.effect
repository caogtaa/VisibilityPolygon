// Copyright 2020 Cao Gaoting<caogtaa@gmail.com>
// https://caogtaa.github.io
// This file is licensed under the MIT License.
// License text available at https://opensource.org/licenses/MIT

/*
 * Date: 2020-07-13 02:44:17
 * LastEditors: GT<caogtaa@gmail.com>
 * LastEditTime: 2021-03-08 00:27:16
*/ 

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
}%

CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  out vec2 v_pos;

  void main() {
    vec4 pos = vec4(a_position, 1);
    v_pos = pos.xy;

    pos = cc_matViewProj * pos;
    gl_Position = pos;
  }
}%

// by caogtaa
CCProgram fs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  #define PI 3.141592653589793

  in vec2 v_pos;
  uniform UARGS {
    vec2 origin;
    float radius;
    float radarRadius;
  };

  uniform sampler2D texture;

  float Circle(vec2 uv, vec2 origin, float r, float blur) {
    float d = distance(uv, origin);
    return smoothstep(r + blur, r - blur, d);
  }

  float Ring(vec2 uv, vec2 origin, float r, float width, float blur) {
    float d = distance(uv, origin);
    return smoothstep(width, width-blur, abs(d - r));
  }

  float Remap01(float a, float b, float t) {
    return (t-a) / (b-a);
  }

  void main()
  {
#if GT_CIRCLE_FOV
    // 视野是圆形区域
    float circleMask = Circle(v_pos, origin, radius, 1.);
    vec4 col = vec4(1., 1., 0., circleMask);
#else
    vec4 col = vec4(1., 1., 0., 1.0);
#endif

#if GT_RADAR_RING
    // 显示扫描环
    // x循环范围[0, PI]
    float x = fract(cc_time.x) * PI;

    // cos曲线取反，移到Y正轴，调整区域到[0, 1]，扫描半径360
    float r = (-cos(x) + 1.0) * 0.5 * radarRadius;
    float ringMask = Ring(v_pos, origin, r, 5., 1.);

    // 快结束的时候(0.9PI后)扫描线渐变至透明
    float threshold = 0.5 * PI;
    float fade = smoothstep(PI, threshold, x);
    ringMask *= fade;

    col = mix(col, vec4(0., 1., 0., 1.0), ringMask);
#endif
    gl_FragColor = col;
  }
}%
