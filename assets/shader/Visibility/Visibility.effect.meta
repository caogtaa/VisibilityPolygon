{
  "ver": "1.0.25",
  "uuid": "faacee35-549e-4ac2-9f98-9c3d6df955d7",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nattribute vec3 a_position;\nvarying vec2 v_pos;\nvoid main() {\n  vec4 pos = vec4(a_position, 1);\n  v_pos = pos.xy;\n  pos = cc_matViewProj * pos;\n  gl_Position = pos;\n}",
        "frag": "\n  precision highp float;\nuniform vec4 cc_time;\n  varying vec2 v_pos;\n  uniform vec2 origin;\nuniform float radius;\nuniform float radarRadius;\n  uniform sampler2D texture;\n  float Circle(vec2 uv, vec2 origin, float r, float blur) {\n    float d = distance(uv, origin);\n    return smoothstep(r + blur, r - blur, d);\n  }\n  float Ring(vec2 uv, vec2 origin, float r, float width, float blur) {\n    float d = distance(uv, origin);\n    return smoothstep(width, width-blur, abs(d - r));\n  }\n  void main()\n  {\n#if GT_CIRCLE_FOV\n    float circleMask = Circle(v_pos, origin, radius, 1.);\n    vec4 col = vec4(1., 1., 0., circleMask);\n#else\n    vec4 col = vec4(1., 1., 0., 1.0);\n#endif\n#if GT_RADAR_RING\n    float x = fract(cc_time.x) * 3.141592653589793;\n    float r = (-cos(x) + 1.0) * 0.5 * radarRadius;\n    float ringMask = Ring(v_pos, origin, r, 5., 1.);\n    float threshold = 0.5 * 3.141592653589793;\n    float fade = smoothstep(3.141592653589793, threshold, x);\n    ringMask *= fade;\n    col = mix(col, vec4(0., 1., 0., 1.0), ringMask);\n#endif\n    gl_FragColor = col;\n  }"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nout vec2 v_pos;\nvoid main() {\n  vec4 pos = vec4(a_position, 1);\n  v_pos = pos.xy;\n  pos = cc_matViewProj * pos;\n  gl_Position = pos;\n}",
        "frag": "\n  precision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\n  in vec2 v_pos;\n  uniform UARGS {\n    vec2 origin;\n    float radius;\n    float radarRadius;\n  };\n  uniform sampler2D texture;\n  float Circle(vec2 uv, vec2 origin, float r, float blur) {\n    float d = distance(uv, origin);\n    return smoothstep(r + blur, r - blur, d);\n  }\n  float Ring(vec2 uv, vec2 origin, float r, float width, float blur) {\n    float d = distance(uv, origin);\n    return smoothstep(width, width-blur, abs(d - r));\n  }\n  void main()\n  {\n#if GT_CIRCLE_FOV\n    float circleMask = Circle(v_pos, origin, radius, 1.);\n    vec4 col = vec4(1., 1., 0., circleMask);\n#else\n    vec4 col = vec4(1., 1., 0., 1.0);\n#endif\n#if GT_RADAR_RING\n    float x = fract(cc_time.x) * 3.141592653589793;\n    float r = (-cos(x) + 1.0) * 0.5 * radarRadius;\n    float ringMask = Ring(v_pos, origin, r, 5., 1.);\n    float threshold = 0.5 * 3.141592653589793;\n    float fade = smoothstep(3.141592653589793, threshold, x);\n    ringMask *= fade;\n    col = mix(col, vec4(0., 1., 0., 1.0), ringMask);\n#endif\n    gl_FragColor = col;\n  }"
      }
    }
  ],
  "subMetas": {}
}